import java.util.*;
import java.lang.*;
import java.io.*;
 
 
/*

Tree is 

                1
          2           3
      4        5
      
      
 Output : 4 2 5 1 3



*/
 
class Node{
    int data;
    Node left;
    Node right;
    Node parent;
 
    public Node(int data, Node left, Node right, Node parent){
       this.data=data;
       this.left=left;
       this.right=right;
       this.parent=parent;
    }
}
 
/* Name of the class has to be "Main" only if the class is public. */
class IdeOne
{
 
    public static boolean isLeaf(Node r){
        return r.left == null && r.right == null;
    }
 
    public static void printData(Node root){
        Node prev = null;
        Node cur = root;
 
        while(cur != null){
        	//Node next = cur;
 
	if(cur.parent == prev){
	   // we are still going downwards 
	   // start with left
	   if(cur.left != null){
	         prev = cur;
	         cur = cur.left;
	         //System.out.print(" == "+cur.data+" == ");
 
	   } else if(cur.right !=null){
	   	//System.out.println(cur.data);
		// go right
		prev = cur;
		cur = cur.right;
		//System.out.print(" == "+cur.data+" == ");
	   } else{
	   	// both its left and right are null. So print it and start going upwards
	   	System.out.print(" == "+cur.data+" == ");
	   	prev = cur;
	   	cur = cur.parent;
 
 
	   }	
	} else if(prev.parent == cur && cur.left == prev ) { // this means that left children are processed. So print this and go right
	         System.out.print("== "+cur.data+" ==");
	         prev = cur;
	         cur = cur.right;
	} else{
		prev = cur;
		cur = cur.parent;
	}
 
 
        }
 
    }
 
 
	public static void main (String[] args) throws java.lang.Exception
	{
		// your code goes here
		Node n1 = new Node(1,null,null,null);
		Node n2 = new Node(2, null, null, null);
		Node n3 = new Node (3, null,null,null);
		Node n4 = new Node (4, null,null,null);
		Node n5 = new Node (5, null,null,null);
 
		n1.left = n2;
		n2.parent = n1;
		n1.right= n3;
		n3.parent = n1;
 
		n2.left = n4;
		n4.parent = n2;
		n2.right = n5;
		n5.parent=n2;
 
 
 
		printData(n1);
 
 
	}
}
